{"version":3,"sources":["constants.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","reducers.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Card","name","email","id","className","alt","src","CardList","robots","map","user","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","SearchBox","searchChange","type","placeholder","onChange","App","useSelector","searchField","searchRobots","isPending","requestRobots","dispatch","useDispatch","useEffect","fetch","then","response","json","data","payload","catch","filteredRobots","filter","robot","toLowerCase","includes","length","event","text","target","value","initialStateSearch","initialStateRobots","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.71b7e747.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","import React from 'react'\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user) => {\n        return (\n          <Card\n            key={user.id}\n            id={user.id}\n            name={user.name}\n            email={user.email}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CardList\n","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false,\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good</h1>\n    } else return this.props.children\n  }\n}\n\nexport default ErrorBoundary\n","import React from 'react'\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '800px',\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll\n","import React from 'react'\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { requestRobots, setSearchField } from '../actions'\nimport CardList from '../components/CardList'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport Scroll from '../components/Scroll'\nimport SearchBox from '../components/SearchBox'\nimport './App.css'\n\n// const mapStateToProps = (state) => {\n//   return {\n//     searchField: state.searchRobots.searchField,\n//     robots: state.requestRobots.robots,\n//     isPending: state.requestRobots.isPending,\n//     error: state.requestRobots.error,\n//   }\n// }\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n//     onRequestRobots: () => requestRobots(dispatch),\n//   }\n// }\n\nfunction App() {\n  const { searchField, isPending, robots, error } = useSelector((state) => ({\n    searchField: state.searchRobots.searchField,\n    isPending: state.requestRobots.isPending,\n    robots: state.requestRobots.robots,\n    error: state.requestRobots.error,\n  }))\n\n  const dispatch = useDispatch()\n\n  const onSearchChange = (event) => dispatch(setSearchField(event.target.value))\n\n  useEffect(() => {\n    dispatch(requestRobots())\n    // eslint-disable-next-line\n  }, [])\n\n  const filteredRobots = robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase())\n  })\n  return isPending ? (\n    <h1>Loading</h1>\n  ) : error.length !== 0 ? (\n    <div className=\"tc\">\n      <h1>Error</h1>\n      <h2> {error} </h2>\n    </div>\n  ) : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  )\n}\n\nexport default App\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from './constants'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from './constants'\n\nconst initialStateSearch = {\n  searchField: '',\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload }\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: '',\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true }\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false }\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false }\n    default:\n      return state\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport 'tachyons'\nimport App from './containers/App'\nimport './index.css'\nimport { requestRobots, searchRobots } from './reducers'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}